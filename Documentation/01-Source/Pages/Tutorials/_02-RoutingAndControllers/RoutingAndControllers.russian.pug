extends ../../../../node_modules/@yamato-daiwa/programming_documentation/Layouts/TwoColumns/TwoColumnsLayout.pug


block append Requirements

  include ../../../SharedAssets/Markup/SharedAssets.english.pug
  include ../../../SharedComponents/SharedComponents.english.pug


block append Metadata

  -

    HTML_PAGE_LANGUAGE = "ru";
    HTML_PAGE_TITLE = buildHTML_PageTitle("Маршрутизация и контроллеры");
    HTML_PageMetaData = {
      description: "",
      author: HTML_PAGE_AUTHOR
    };

    FAVICON_URI = "@MustBeInPublicRoot/favicon";

    styleSheetsURIs = [
      "$CommonStyles",
      "$LayoutsStyles/TwoColumns/TwoColumnsLayout.css",
      "$PreMadesStyles",
      "@CustomizedExternalComponents"
    ];

    scriptsURIs.endOfBody = [ "$CommonLogic" ];

    RoutingEmulator.setCurrentRoute("tutorials.routingAndControllers");

    LanguageDropDownList__YDF_DK.setLinks({
      english: "./RoutingAndControllers.english.html",
      japanese: "./RoutingAndControllers.japanese.html"
    });


block append HeadScripts

  if __IS_PRODUCTION_BUILDING_MODE__

    +GoogleAnalyticsScript


block append SpecificContent

  article

    h1.Article-Heading1 Маршрутизация и контроллеры

    h2.Article-Heading2 Теоретический минимум

    h3.Article-Heading3 URL, URN, URI

    p.Article-Paragraph.
      Разница между терминами #[+Term--YDID URL] (#[+Term--YDID Unified Resource Locator]),
        #[+Term--YDID URN (Unified Resource Name)] и #[+Term--YDID URI (Unified Resource Identifier)],
        а также их разделение на составляющие #[+Keyphrase--YDID может различаться в зависимости от источника информации].
      Хотя анатомия #[+Term--YDID URL], #[+Term--YDID URN] и #[+Term--YDID URI] является
        #[+Keyphrase--YDID не зависящим от фреймворка] фундаментальным знанием, необходимо условиться,
        какая анатомия актуальна конкретно для фреймворка #[+ImportantEntity--YDID YDB].

    p.Article-Paragraph.
      Начнём с того, что мы не будем обсуждать разницу между #[+Term--YDID URL] и #[+Term--YDID URN],
        поскольку сейчас важно то, что #[+Term--YDID URI] является #[+Keyword--YDID полной] сущностью, включающей
        в себя #[+Term--YDID URL] и #[+Term--YDID URN] (#[+Keyphrase--YDID в зависимости от источника информации],
        #[+Term--YDID URL] и #[+Term--YDID URL] могут пересекаться или нет).

    p.Article-Paragraph.
      Хотя помимо веб-разработки, концепция #[+Term--YDID URI] может относиться и к файлам на конкретном компьютере,
        сейчас сконцентрируемся на особенностях #[+Term--YDID URI] в веб-разработке.


    h4.Article-Heading4 Анатомия URI

    p.Article-Paragraph.
      Рассмотрим значимые составляющие #[+Term--YDID URI].
      Сейчас нас больше интересует то, как мы будем использовать эти составляющие, нежели их канонические определения,
        поэтому представленный ниже глоссарий содержит описания, а не определения.

    +SingleImageViewer--YDF({
      imageURI: "@AssociatedWithPages/Tutorials/RoutingAndControllers/Images/URI_Decomposition",
      imageAlternateText: "Декомпозиция URI: протокол, домен, порт, сокет, путь и так далее."
    })

    dl.Article-DescriptionList

      dt Протокол (Protocol)
      dd Нас сейчас интересуют протоколы #[+Term--YDID HTTP] и #[+Term--YDID HTTPS].

      dt IP Address
      dd.
        В режиме локальной разработки обычно это будет #[+Keyword--YDID локальный] #[+Term--YDID IP-адрес]
          (#[+Keyword--YDID обычно] #[+ImportantEntity--YDID 127.0.0.1], он же #[+Term--YDID localhost]).
        Для продакшн-подобных режимов это будет #[+Term--YDID IP-адрес], выданный поставщиком услуг по сдаче серверов в аренду.
        Мы можем арендовать #[+Term--YDID доменное имя] и привязать его к этому #[+Term--YDID IP-адресу].

      dt Домен (доменное имя)
      dd.
        Наличие человекопонятного домена востребовано в основном в режиме продакшн, когда сайт или приложение становятся
          доступными для посетителей.
        Помимо технологического аспекта, #[+Term--YDID доменное имя] является частью брендинга.
        Тем не менее, разрабатывая сайт или приложение, необходимо принять меры, чтобы переход с одного домена на
          другой был наиболее простым (в идеале - без внесения изменений в исходный код).

      dt Порт
      dd.
        Благодаря тому что портов существует много, на одном сервере можно запускать несколько приложений, которые могут
          общаться в внешним миром через интернет.
        Часть портов используется программным обеспечением для разных целей, но сейчас нас интересуют один, максимум
          2 порта (когда у нас поддерживаются и HTTP, и HTTPS) для обслуживания HTTP-запросов.

      dt Хэш
      dd Эта часть предназначена исключительно для клиентской стороны и сервером не обрабатывается.


    h3.Article-Heading3 Определение маршрутизации

    p.Article-Paragraph.
      Теперь, когда мы говорились об анатомии #[+Term--YDID URI] anatomy, можно ввести понятие #[+Term--YDID маршрутизации]
        (#[+Term--YDID роутинга]).
      Однако сразу оговоримся, что

    +AdmonitionBlock--YDF({ decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.warning, SVG_Icon: true }).
      Понятие маршрутизации зависит от контекста.
      В последнее время маршрутизация имеет место быть не только на серверной, но и на клиентской стороне, и там
        подход несколько другой.

    p.Article-Paragraph.
      Итак, #[+DefinableTerm--YDID маршрутизация (роутинг) на серверной стороне] - это генерация определённых
        ответов на #[+Term--YDID HTTP-запросы] в зависимости от конкретных #[+Term--YDID URI] либо их шаблонов
        (в основном от #[+Term--YDID пути] и #[+Term--YDID параметров поиска]) а также от #[+Keyword--YDID не] являющихся
        частью #[+Term--YDID URI] #[+Term__Contrast--YDID HTTP-методов].
      Вся эта логика условных ответов полностью реализуется разработчиком сайта или приложения.

    +AdmonitionBlock--YDF({ decorativeVariation: AdmonitionBlock__YDF.DecorativeVariations.notice, SVG_Icon: true }).
      Два и более #[+Term--YDID URI] могут быть одинаковыми при условии, что они принадлежат разным
        #[+Term--YDID HTTP-методам].
      Например с помощью запроса можно #[+SecondaryEntity__Code--YDID https://example.com/products/2] получать данные о
        товаре с идентификатором #[+SecondaryEntity__Code--YDID 2], если запрос #[+SecondaryEntity__Code--YDID GET],
        или же удалять товар с идентификатором #[+SecondaryEntity__Code--YDID 2], если запрос имеет тип
        #[+SecondaryEntity__Code--YDID DELETE].
      Однако все эти имена HTTP-методов (GET, POST, PUT, DELETE и так далее) являются условностями, а что на самом
        деле будет происходить при отправке запроса того или иного типа - зависит от того, что реализует разработчик.


    p.Article-Paragraph.
      Рассмотрим типичные #[+Term--YDID маршруты] корпоративного веб-сайта.

    //- TODO Добавить типы запросов
    table
      thead
        tr
          th Путь URI
          th Что обычно отправляют с ответом
      tbody
        tr
          td /
          td HTML-код главной страницы
        tr
          td /about
          td HTML-код страницы "о нас"
        tr
          td /products
          td HTML-код страницы со списком продукции компании
        tr
          td /products/{id}
          td.
            HTML-код страницы с подробным описанием продукта (вообще, в современном понимании, корпоративный сайт -
              это набор лендингов под каждый товар и каждую услугу, а такие страницы, как "о нас", являются вспомогательной
              формальностью).
            Здесь {id} является идентификатором продукта, который может быть числовым или буквенным - это как разработчик
              реализует.
        tr
          td /contact
          td HTML-код страницы с формой связи

